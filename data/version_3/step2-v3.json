{
  "procedure_name": "Primary authentication and key agreement procedure",
  "steps": [
    {
      "id": 1,
      "description": "UE initiates authentication by sending an Authentication Request to the network.",
      "entities": "UE",
      "state_changes": "UE transitions to AUTH_REQUESTED state.",
      "messages": [
        {
          "name": "Authentication Request",
          "from": "UE",
          "to": "Network"
        }
      ],
      "trigger": "User requests network access or network requests authentication.",
      "conditions": [],
      "dependencies": [],
      "alternative_paths": [],
      "side_effects": "Starts timer for authentication response."
    },
    {
      "id": 2,
      "description": "The network receives the Authentication Request and validates the UE's identity and capabilities. It then generates a random challenge (RAND) and retrieves authentication vector(s) from the HSS/AUSF.",
      "entities": "Network, HSS/AUSF",
      "state_changes": "Network stores UE's capabilities and RAND. Network transitions to AUTH_CHALLENGE_SENT state.",
      "messages": [
        {
          "name": "Authentication Vector Request",
          "from": "Network",
          "to": "HSS/AUSF"
        },
        {
          "name": "Authentication Vector Response",
          "from": "HSS/AUSF",
          "to": "Network"
        }
      ],
      "trigger": "Reception of Authentication Request from UE.",
      "conditions": [],
      "dependencies": [
        {
          "step": 2,
          "depends_on": 1,
          "type": "hard",
          "condition": "Reception of Authentication Request"
        }
      ],
      "alternative_paths": [],
      "side_effects": "Network selects an appropriate authentication vector (RAND, AUTN, XRES, KASME)."
    },
    {
      "id": 3,
      "description": "The network sends an Authentication Challenge containing the RAND and AUTN to the UE.",
      "entities": "Network, UE",
      "state_changes": "None",
      "messages": [
        {
          "name": "Authentication Challenge",
          "from": "Network",
          "to": "UE"
        }
      ],
      "trigger": "Successful retrieval of authentication vectors from HSS/AUSF.",
      "conditions": [],
      "dependencies": [
        {
          "step": 3,
          "depends_on": 2,
          "type": "hard",
          "condition": "Successful retrieval of authentication vectors."
        }
      ],
      "alternative_paths": [],
      "side_effects": "Starts timer for Authentication Response from UE."
    },
    {
      "id": 4,
      "description": "The UE verifies the AUTN in the Authentication Challenge. If AUTN is valid, the UE calculates RES and KASME. If AUTN is invalid, the UE sends an Authentication Failure message.",
      "entities": "UE",
      "state_changes": "If AUTN is valid, UE calculates RES and KASME and transitions to AUTH_CHALLENGE_VERIFIED state. Otherwise, UE transitions to AUTH_FAILED state.",
      "messages": [
        {
          "name": "Authentication Failure",
          "from": "UE",
          "to": "Network"
        }
      ],
      "trigger": "Reception of Authentication Challenge from the network.",
      "conditions": [
        {
          "if": "AUTN is invalid",
          "then": 7,
          "else": 5,
          "timeout": "None"
        }
      ],
      "dependencies": [
        {
          "step": 4,
          "depends_on": 3,
          "type": "hard",
          "condition": "Reception of Authentication Challenge."
        }
      ],
      "alternative_paths": [],
      "side_effects": "UE checks if AUTN is within the acceptable sequence number range. If not, synchronization failure procedure is triggered (not detailed here)."
    },
    {
      "id": 5,
      "description": "The UE sends an Authentication Response containing the RES to the network.",
      "entities": "UE, Network",
      "state_changes": "None",
      "messages": [
        {
          "name": "Authentication Response",
          "from": "UE",
          "to": "Network"
        }
      ],
      "trigger": "Successful AUTN verification.",
      "conditions": [],
      "dependencies": [
        {
          "step": 5,
          "depends_on": 4,
          "type": "hard",
          "condition": "AUTN Verification Success."
        }
      ],
      "alternative_paths": [],
      "side_effects": "None"
    },
    {
      "id": 6,
      "description": "The network compares the received RES with the expected XRES. If they match, the authentication is successful. The network derives the session key KASME. The network sends Authentication Result to the UE.",
      "entities": "Network",
      "state_changes": "If RES matches XRES, the network authenticates the UE and derives KASME. Network transitions to AUTH_SUCCESS state.",
      "messages": [
        {
          "name": "Authentication Result",
          "from": "Network",
          "to": "UE"
        }
      ],
      "trigger": "Reception of Authentication Response from UE.",
      "conditions": [
        {
          "if": "RES matches XRES",
          "then": 8,
          "else": 7,
          "timeout": "None"
        }
      ],
      "dependencies": [
        {
          "step": 6,
          "depends_on": 5,
          "type": "hard",
          "condition": "Reception of Authentication Response."
        }
      ],
      "alternative_paths": [],
      "side_effects": "Network selects the security algorithm to be used."
    },
    {
      "id": 7,
      "description": "Authentication Failure: The UE or network sends an Authentication Failure message indicating the reason for failure.  The procedure ends.",
      "entities": "UE, Network",
      "state_changes": "UE and Network transition to AUTH_FAILED state.",
      "messages": [
        {
          "name": "Authentication Failure",
          "from": "UE/Network",
          "to": "Network/UE"
        }
      ],
      "trigger": "AUTN verification failure or RES mismatch.",
      "conditions": [],
      "dependencies": [
        {
          "step": 7,
          "depends_on": 4,
          "type": "soft",
          "condition": "AUTN invalid"
        },
        {
          "step": 7,
          "depends_on": 6,
          "type": "soft",
          "condition": "RES != XRES"
        }
      ],
      "alternative_paths": [],
      "side_effects": "UE or Network may log the failure event."
    },
    {
      "id": 8,
      "description": "The UE receives the Authentication Result from the network and verifies the success. If successful, the UE derives the session key KASME.",
      "entities": "UE",
      "state_changes": "UE derives KASME and transitions to AUTH_SUCCESS state.",
      "messages": [],
      "trigger": "Reception of Authentication Result from the network.",
      "conditions": [],
      "dependencies": [
        {
          "step": 8,
          "depends_on": 6,
          "type": "hard",
          "condition": "Authentication Success by Network"
        }
      ],
      "alternative_paths": [
        {
          "condition": "Authentication Result indicates failure",
          "next_step": 7
        }
      ],
      "side_effects": "UE is now mutually authenticated with the network."
    }
  ]
}